package test;

import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import javax.ejb.EJB;
import javax.naming.Context;
import javax.naming.InitialContext;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import entity.Person;
import junit.framework.TestCase;
import sessionsBeans.KontoerRemote;
import sessionsBeans.PersonerRemote;

public class Tests extends TestCase {
	
	Context context;
	
	@EJB
	PersonerRemote personer;
	KontoerRemote kontoer;
	
	public static void main(String[] args) {

		
		
	}
	

	public void setup() {
		System.out.println("Connecting to beans...");
		Properties p = new Properties();
		p.put(Context.INITIAL_CONTEXT_FACTORY, "org.apache.openejb.client.RemoteInitialContextFactory");
		p.put("BankDBDatasource","new://Resource?type=DataSource");
		p.put("BankDBDatasource.JdbcDriver","org.hsqldb.jdbcDriver");
		p.put("BankDBDatasource.JdbcUrl","jdbc:hsqldb:file:data/bankdb/hsqldb");
		p.put("Unmanaged_BankDBDataSource","new://Resource?type=DataSource");
		p.put("Unmanaged_BankDBDataSource.JdbcDriver","org.hsqldb.jdbcDriver");
		p.put("Unmanaged_BankDBDataSource.JdbcUrl","jdbc:hsqldb:file:data/bankdb/hsqldb");
		p.put("Unmanaged_BankDBDataSource.JtaManaged","false");
		
		try {
			context= new InitialContext(p);
			personer= (PersonerRemote)context.lookup("PersonerRemote");
			kontoer= (KontoerRemote)context.lookup("KontoerRemote");
			
		} catch(Exception e) {
			System.out.println("Error, could not connect to remote: ");
			e.printStackTrace();
		}	
		System.out.println("Connection completed");
	}
	
	
	@AfterClass
	public void tearDown() {
		
		//remove all personer
		try{
			List<Person> list = personer.list();
			for(Person pers : list) {
				if(pers.getId() > 0) {
					personer.remove(pers);
					System.out.println("Deleting ... : "+ pers.getFodselsdato() + " -" + 
					pers.getFodselsnummer() + ": "+ pers.getNavn());
					}
				else {
					System.out.println("Delete failed ... : "+ pers.getFodselsdato() + "-"+ pers.getFodselsnummer() + ": "+ pers.getNavn());
					}
			}
		} catch (Exception e) {
			System.out.println("Error, could not remove personer from list: ");
			e.printStackTrace();
		}
		finally {
		}
	}
	
	@Test
	public void whenAddingNewPersonsToListCountWillIncrease() throws Exception {
		
		List<Person> list = personer.list();
		int assertsize = list.size();
		assertEquals( "List.size()", assertsize, list.size());
		
		Calendar c = Calendar.getInstance();
		c.set(1988, 00, 00, 01, 01, 01);
		Person p = new Person((Date) c.getTime(), "15251", "Gurgle Halsbrann", 
				"Jørgen Fisefins terasse 3","", "8515", "Narvik", "Harry Potter", 
				"1111","En av de virkelig store Halsbrannene i historien");
		personer.add(p);
		
		c.set(1986, 01, 01, 01, 01, 01);
		p = new Person((Date)c.getTime(), "12345", "Sylfrid Fuglesang", "Øvre Undergang 22","",
				"8515", "Narvik", "Jupp", "1111", "Kvitrende glad og positiv");
		personer.add(p);
		
		c.set(1990, 11, 11, 01, 01, 01);
		p = new Person((Date)c.getTime(), "33332", "Snork Rumlepung", "c/o Rosa Balle", 
				"Snyltestien 1","8514", "Narvik", "Money","1111","Uten sidestykke i nyere historie");
		personer.add(p);

		c.set(1991, 9, 21, 01, 01, 01);
		p = new Person((Date)c.getTime(), "54321","Walter Pengesluk","Andeby undergrunn","",
				"8500","Narvik","Donald","1111","Nær venn av Kjell Inge Røkke");
		personer.add(p);
		
		assertEquals( "List.size()", assertsize + 4, list.size());	
	}

}
